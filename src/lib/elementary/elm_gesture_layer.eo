type Elm_Gesture_Event_Cb: __undefined_type; [[Elementary gesture event callback type]]

enum Elm.Gesture.Type
{
   [[
     Enum of supported gesture types.
   ]]
   legacy: elm_gesture;
   first = 0, [[First type used for iteration over the enum]]
   n_taps, [[N fingers single taps]]
   n_long_taps, [[N fingers single long-taps]]
   n_double_taps, [[N fingers double-single taps]]
   n_triple_taps, [[N fingers triple-single taps]]
   momentum, [[Reports momentum in the direction of move]]
   n_lines, [[N fingers line gesture]]
   n_flicks, [[N fingers flick gesture]]
   zoom, [[Zoom]]
   rotate, [[Rotate]]
   last [[Sentinel value to indicate last enum field during iteration]]
}

enum Elm.Gesture.State
{
   [[
     Enum of gesture states.
   ]]
   undefined = -1, [[Gesture not started]]
   start, [[Gesture started]]
   move, [[Gesture is ongoing]]
   end, [[Gesture completed]]
   abort [[Ongoing gesture was aborted]]
}

class Elm.Gesture_Layer extends Efl.Ui.Widget implements Efl.Ui.Legacy
{
   [[Elementary gesture layer class]]
   legacy_prefix: elm_gesture_layer;
   eo_prefix: elm_obj_gesture_layer;
   methods {
      @property zoom_step {
            [[Control step value for zoom action.]]
         set {
            [[When recognizing the zoom gesture, it should be recognized as zooming larger
              than step.
            ]]
         }
         get {
         }
         values {
            step: double; [[The zoom step value.]]
         }
      }
      @property tap_finger_size {
         set {
            [[This function sets the gesture layer finger-size for taps.

              If not set, it's taken from elm_config.
              Set to 0 if you want GLayer to use the system finger size
              value (default).

              @since 1.8
            ]]
         }
         get {
            [[This function returns the gesture layer finger-size for taps

              @since 1.8
            ]]
         }
         values {
            sz: int; [[The finger size.]]
         }
      }
      @property hold_events {
         set {
            [[This function makes gesture-layer repeat events.

              Set this if you like to get the raw events only if gestures
              were not detected.

              Clear this if you like gesture layer to forward events as
              testing gestures.
            ]]
         }
         get {
            [[Get the repeat-events setting.]]
         }
         values {
            hold_events: bool; [[If $true get events only if gesture was not detected, $false otherwise]]
         }
      }
      @property rotate_step {
            [[This function returns step-value for rotate action.]]
         set {
            [[Set to 0 to cancel step setting.

              When recognizing the rotate gesture, the rotated size must be larger
              than step.
            ]]
         }
         get {
         }
         values {
            step: double; [[New rotate step value.]]
         }
      }
      @property cb {
         set {
            [[Set the gesture state change callback.

              When all callbacks for the gesture are set to $null,
              it means this gesture is disabled.
            ]]
         }
         values {
            idx: Elm.Gesture.Type; [[The gesture you want to track state of.]]
            cb_type: Elm.Gesture.State; [[The event the callback tracks (START, MOVE, END, ABORT).]]
            cb: Elm_Gesture_Event_Cb; [[The callback itself.]]
            data: void_ptr @optional; [[Custom data to be passed.]]
         }
      }
      attach {
         [[Attach a gesture layer widget to an Evas object (setting the
           widget's target).

           A gesture layer's target may be any Evas object. This object
           will be used to listen to mouse and key events.
         ]]
         return: bool; [[$true on success, $false otherwise.]]
         params {
            @in target: Efl.Canvas.Object; [[The object to attach.]]
         }
      }
      cb_del {
         [[Remove a gesture callback.]]
         params {
            @in idx: Elm.Gesture.Type; [[The gesture you want to track state of.]]
            @in cb_type: Elm.Gesture.State; [[The event the callback tracks (START, MOVE, END, ABORT).]]
            @in cb: Elm_Gesture_Event_Cb; [[The callback itself.]]
            @in data: void_ptr @nullable; [[Custom callback data.]]
         }
      }
      cb_add {
         [[Add a gesture state change callback.

           When all callbacks for the gesture are set to $null,
           it means this gesture is disabled.

           If a function was already set for this gesture/type/state, it
           will be replaced by the new one. For ABI compat, callbacks
           added by @.cb_add will be removed. It is recommended to
           use only one of these functions for a gesture object.
         ]]
         params {
            @in idx: Elm.Gesture.Type; [[The gesture you want to track state of.]]
            @in cb_type: Elm.Gesture.State; [[The event the callback tracks (START, MOVE, END, ABORT).]]
            @in cb: Elm_Gesture_Event_Cb; [[The callback itself.]]
            @in data: void_ptr @optional; [[Custom data to be passed.]]
         }
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.Ui.Widget.disabled {set;}
   }
}
